#-----------------------------------------------------------------------------
#
#  Configuration for continuous integration service at appveyor.com
#
#-----------------------------------------------------------------------------

# Operating system (build VM template)
os: Visual Studio 2015

matrix:
  # Abort all the builds as soon as one fails.
  fast_finish: true 

# Build for x86 and x64.
platform:
  - x64
  - x86

# Build only in the Release configuration, because we don't have debug libs.
configuration: Release

# Environment variables shared between all stanzas below.
environment:
  project: C:\projects\%APPVEYOR_PROJECT_NAME%

# Build dependencies.
install:
  # Show all env vars.
  - cmake -version
  - set
  # Set Python version, and PlatformString which goes in the zip filename.
  - ps: >-
      If ($env:PLATFORM -Match "x64") {
        $env:PYTHON="C:\Python27-x64\python.exe"
        $env:PlatformString="win64"
      } Else {
        $env:PYTHON="C:\Python27\python.exe"
        $env:PlatformString="win32"
      }
  - python --version
  - git submodule update --init --recursive
  - ps: .\WindowsBuilder.ps1 -deps -arch "$env:PLATFORM"

# Build playd.
build_script:
  - cd "%project%"
  - ps: .\WindowsBuilder.ps1 -playd -tests -arch "$env:PLATFORM"

# Run tests.
test_script:
  - cd "%project%\%PLATFORM%\build"
  - ctest --output-on-failure
    -C "%CONFIGURATION%"

# Zip up all the exes, DLLs, and licenses.
after_build:
  - ps: >-
      If (Test-Path Env:\APPVEYOR_REPO_TAG_NAME) {
        $zipname="playd_${env:APPVEYOR_REPO_TAG_NAME}_${env:PlatformString}.zip"
      } Else {
        $zipname="playd_${env:PlatformString}.zip"
      }
      $zippath="$env:project\$zipname";
      cd "$env:project\$env:PLATFORM\build\$env:CONFIGURATION";
      7z a "$zippath" *

# Make an artifact out of the zip. Artifacts for all builds are available from
# the Appveyor CI interface, or from the API.
artifacts:
  - path: playd*.zip
    name: playd $(PlatformString)

# When building a tag, create a GitHub release (if it doesn't already exist),
# and push the zip to it.
deploy:
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: ''
  provider: GitHub
  auth_token:
    secure: 03tkU2QJcSu1MpxDa6+BKaq5Yq+t/JpO5SxTaW/HmdjrrJf8wJSxF/dECbCEfGfk
  artifact: playd_$(APPVEYOR_REPO_TAG_NAME)_$(PlatformString).zip
  draft: true
  prerelease: true
  force_update: false
  on:
    appveyor_repo_tag: true
