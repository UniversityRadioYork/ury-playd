# Compiler specific flags
INCLUDE(CheckCXXCompilerFlag)

IF (${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
    # using Visual Studio C++
    # Linker
    # /OPT:REF enables also /OPT:ICF and disables INCREMENTAL
    SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG /OPT:REF")
    # /OPT:NOICF is recommended when /DEBUG is used (http://msdn.microsoft.com/en-us/library/xe4t6fc1.aspx)
    SET(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:NOICF")
    SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG /OPT:REF")
    SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /DEBUG /OPT:NOICF")
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")

IF(${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
    IF(MSVC_VERSION STREQUAL "1900")
        SET(SUPPORTS_C14 ON)
    ENDIF(MSVC_VERSION STREQUAL "1900")
ELSE(${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
    CHECK_CXX_COMPILER_FLAG("-std=c++14" SUPPORTS_C14)
    IF(SUPPORTS_C14)
        MESSAGE(STATUS "Enabling '-std=c++14' C++ compiler flag.")
        LIST(APPEND CMAKE_CXX_FLAGS "-std=c++14")
    ENDIF(SUPPORTS_C14)
ENDIF(${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")

IF(SUPPORTS_C14)
    MESSAGE(STATUS "Using C++14 compatible compiler: ${CMAKE_CXX_COMPILER_ID}.")
ELSE(SUPPORTS_C14)
    MESSAGE(FATAL_ERROR "Unable to locate a C++14 compatible compiler.")
ENDIF(SUPPORTS_C14)


# This flag appeared to be important when compiling in Travis VMs
CHECK_CXX_COMPILER_FLAG(-fPIC CXX_FPIC_FLAG)
IF(CXX_FPIC_FLAG)
    MESSAGE(STATUS "Enabling '-fPIC' C compiler flag.")
    LIST(APPEND CMAKE_C_FLAGS "-fPIC")
ENDIF(CXX_FPIC_FLAG)

# Print compiler flags
MESSAGE(STATUS "CXX compilation flags: ${CMAKE_CXX_FLAGS}.")
MESSAGE(STATUS "C compilation flags: ${CMAKE_C_FLAGS}.")
